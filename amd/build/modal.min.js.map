{"version":3,"file":"modal.min.js","sources":["../src/modal.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Contain the logic for a drawer.\n *\n * @copyright  2023 Willian Mano - http://conecti.me\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine([\n        'jquery',\n        'core/notification',\n        'core/custom_interaction_events',\n        'core/modal',\n        'core/modal_registry',\n        'local_modreportproblem/repository',\n        'local_modreportproblem/sweetalert'\n    ], function($, Notification, CustomEvents, Modal, ModalRegistry, Repository, Swal) {\n\n    var registered = false;\n    var SELECTORS = {\n        SAVE_BUTTON: '[data-action=\"save\"]',\n        CANCEL_BUTTON: '[data-action=\"cancel\"]'\n    };\n\n    /**\n     * Constructor for the Modal.\n     *\n     * @param {object} root The root jQuery element for the modal\n     */\n    var ModalReportProblem = function(root) {\n        Modal.call(this, root);\n    };\n\n    ModalReportProblem.TYPE = 'local_modreportproblem-modal';\n    ModalReportProblem.prototype = Object.create(Modal.prototype);\n    ModalReportProblem.prototype.constructor = ModalReportProblem;\n\n    /**\n     * Set up all of the event handling for the modal.\n     *\n     * @method registerEventListeners\n     */\n    ModalReportProblem.prototype.registerEventListeners = function() {\n        // Apply parent event listeners.\n        Modal.prototype.registerEventListeners.call(this);\n\n        this.getModal().on(CustomEvents.events.activate, SELECTORS.SAVE_BUTTON, function() {\n            Repository.create(this.getFormData())\n                .then(function() {\n                    var Toast = Swal.mixin({\n                        toast: true,\n                        position: 'top-end',\n                        showConfirmButton: false,\n                        timer: 8000,\n                        timerProgressBar: true,\n                        onOpen: (toast) => {\n                            toast.addEventListener('mouseenter', Swal.stopTimer);\n                            toast.addEventListener('mouseleave', Swal.resumeTimer);\n                        }\n                    });\n\n                    Toast.fire({\n                        icon: 'success',\n                        title: 'Problema reportado com sucesso.<br> Obrigado por nos ajudar a evoluir nossa plataforma.'\n                    });\n                })\n                .catch(Notification.exception);\n\n            this.hide();\n\n            this.destroy();\n        }.bind(this));\n\n        this.getModal().on(CustomEvents.events.activate, SELECTORS.CANCEL_BUTTON, function() {\n            this.hide();\n            this.destroy();\n        }.bind(this));\n    };\n\n    /**\n     * Get the serialised form data.\n     *\n     * @method getFormData\n     * @return {string} serialised form data\n     */\n    ModalReportProblem.prototype.getFormData = function() {\n        return this.getForm().serialize();\n    };\n\n    /**\n     * Get the form element from the modal.\n     *\n     * @method getForm\n     * @return {object}\n     */\n    ModalReportProblem.prototype.getForm = function() {\n        return this.getBody().find('form');\n    };\n\n    // Automatically register with the modal registry the first time this module is imported so that you can create modals\n    // of this type using the modal factory.\n    if (!registered) {\n        ModalRegistry.register(ModalReportProblem.TYPE, ModalReportProblem, 'local_modreportproblem/modal');\n        registered = true;\n    }\n\n    return ModalReportProblem;\n});"],"names":["define","$","Notification","CustomEvents","Modal","ModalRegistry","Repository","Swal","registered","SELECTORS","ModalReportProblem","root","call","this","TYPE","prototype","Object","create","constructor","registerEventListeners","getModal","on","events","activate","getFormData","then","mixin","toast","position","showConfirmButton","timer","timerProgressBar","onOpen","addEventListener","stopTimer","resumeTimer","fire","icon","title","catch","exception","hide","destroy","bind","getForm","serialize","getBody","find","register"],"mappings":";;;;;;AAqBAA,sCAAO,CACC,SACA,oBACA,iCACA,aACA,sBACA,oCACA,sCACD,SAASC,EAAGC,aAAcC,aAAcC,MAAOC,cAAeC,WAAYC,UAEzEC,YAAa,EACbC,sBACa,uBADbA,wBAEe,yBAQfC,mBAAqB,SAASC,MAC9BP,MAAMQ,KAAKC,KAAMF,cAGrBD,mBAAmBI,KAAO,gCAC1BJ,mBAAmBK,UAAYC,OAAOC,OAAOb,MAAMW,YACtBG,YAAcR,mBAO3CA,mBAAmBK,UAAUI,uBAAyB,WAElDf,MAAMW,UAAUI,uBAAuBP,KAAKC,WAEvCO,WAAWC,GAAGlB,aAAamB,OAAOC,SAAUd,sBAAuB,WACpEH,WAAWW,OAAOJ,KAAKW,eAClBC,MAAK,WACUlB,KAAKmB,MAAM,CACnBC,OAAO,EACPC,SAAU,UACVC,mBAAmB,EACnBC,MAAO,IACPC,kBAAkB,EAClBC,OAASL,QACLA,MAAMM,iBAAiB,aAAc1B,KAAK2B,WAC1CP,MAAMM,iBAAiB,aAAc1B,KAAK4B,gBAI5CC,KAAK,CACPC,KAAM,UACNC,MAAO,+FAGdC,MAAMrC,aAAasC,gBAEnBC,YAEAC,WACPC,KAAK9B,YAEFO,WAAWC,GAAGlB,aAAamB,OAAOC,SAAUd,wBAAyB,gBACjEgC,YACAC,WACPC,KAAK9B,QASXH,mBAAmBK,UAAUS,YAAc,kBAChCX,KAAK+B,UAAUC,aAS1BnC,mBAAmBK,UAAU6B,QAAU,kBAC5B/B,KAAKiC,UAAUC,KAAK,SAK1BvC,aACDH,cAAc2C,SAAStC,mBAAmBI,KAAMJ,mBAAoB,gCACpEF,YAAa,GAGVE"}