{"version":3,"file":"create.min.js","sources":["../../src/problem/create.js"],"sourcesContent":["/**\n * Report problem js logic.\n *\n * @copyright   2022 Willian Mano {@link https://conecti.me}\n * @author      Willian Mano <willianmanoaraujo@gmail.com>\n */\n/* eslint-disable */\ndefine([\n        'jquery',\n        'core/config',\n        'core/str',\n        'core/modal_factory',\n        'core/modal_events',\n        'core/fragment',\n        'core/ajax',\n        'local_modreportproblem/sweetalert',\n        'core/yui'],\n    function($, Config, Str, ModalFactory, ModalEvents, Fragment, Ajax, Swal, Y) {\n\n        var CreateProblem = function(selector, contextid, courseid, cmid, module) {\n            this.contextid = contextid;\n\n            this.courseid = courseid;\n\n            this.cmid = cmid;\n\n            this.module = module;\n\n            this.init(selector);\n        };\n\n        CreateProblem.prototype.modal = null;\n\n        CreateProblem.prototype.contextid = -1;\n\n        CreateProblem.prototype.courseid = -1;\n\n        CreateProblem.prototype.cmid = -1;\n\n        CreateProblem.prototype.module = '';\n\n        CreateProblem.prototype.init = function(selector) {\n            var triggers = $(selector);\n\n            return Str.get_string('reporttechnicalproblem', 'local_modreportproblem').then(function(title) {\n                // Create the modal.\n                return ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: title,\n                    body: this.getBody({courseid: this.courseid, cmid: this.cmid, module: this.module})\n                }, triggers);\n            }.bind(this)).then(function(modal) {\n                // Keep a reference to the modal.\n                this.modal = modal;\n\n                // We want to reset the form every time it is opened.\n                this.modal.getRoot().on(ModalEvents.hidden, function() {\n                    this.modal.setBody(this.getBody({courseid: this.courseid, cmid: this.cmid, module: this.module}));\n                }.bind(this));\n\n                // We want to hide the submit buttons every time it is opened.\n                this.modal.getRoot().on(ModalEvents.shown, function() {\n                    this.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                }.bind(this));\n\n                // We catch the modal save event, and use it to submit the form inside the modal.\n                // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                this.modal.getRoot().on(ModalEvents.save, this.submitForm.bind(this));\n                // We also catch the form submit event and use it to submit the form with ajax.\n                this.modal.getRoot().on('submit', 'form', this.submitFormAjax.bind(this));\n\n                return this.modal;\n            }.bind(this));\n        };\n\n        CreateProblem.prototype.getBody = function(formdata) {\n            if (typeof formdata === \"undefined\") {\n                formdata = {};\n            }\n\n            // Get the content of the modal.\n            var params = {jsonformdata: JSON.stringify(formdata)};\n\n            return Fragment.loadFragment('local_modreportproblem', 'report_form', this.contextid, params);\n        };\n\n        CreateProblem.prototype.handleFormSubmissionResponse = function(data) {\n            this.modal.hide();\n            // We could trigger an event instead.\n            Y.use('moodle-core-formchangechecker', function() {\n                M.core_formchangechecker.reset_form_dirty_state();\n            });\n\n            var Toast = Swal.mixin({\n                toast: true,\n                position: 'top-end',\n                showConfirmButton: false,\n                timer: 8000,\n                timerProgressBar: true,\n                onOpen: (toast) => {\n                    toast.addEventListener('mouseenter', Swal.stopTimer);\n                    toast.addEventListener('mouseleave', Swal.resumeTimer);\n                }\n            });\n\n            Toast.fire({\n                icon: 'success',\n                title: data.status\n            });\n        };\n\n        CreateProblem.prototype.handleFormSubmissionFailure = function() {\n            var data = this.modal.getRoot().find('form').serializeArray();\n\n            // Oh noes! Epic fail :(\n            // Ah wait - this is normal. We need to re-display the form with errors!\n            this.modal.setBody(this.getBody(JSON.parse(data)));\n        };\n\n        CreateProblem.prototype.submitFormAjax = function(e) {\n            // We don't want to do a real form submission.\n            e.preventDefault();\n\n            var changeEvent = document.createEvent('HTMLEvents');\n            changeEvent.initEvent('change', true, true);\n\n            // Prompt all inputs to run their validation functions.\n            // Normally this would happen when the form is submitted, but\n            // since we aren't submitting the form normally we need to run client side\n            // validation.\n            this.modal.getRoot().find(':input').each(function(index, element) {\n                element.dispatchEvent(changeEvent);\n            });\n\n            // Now the change events have run, see if there are any \"invalid\" form fields.\n            var invalid = $.merge(\n                this.modal.getRoot().find('[aria-invalid=\"true\"]'),\n                this.modal.getRoot().find('.error')\n            );\n\n            // If we found invalid fields, focus on the first one and do not submit via ajax.\n            if (invalid.length) {\n                invalid.first().focus();\n                return;\n            }\n\n            // Convert all the form elements values to a serialised string.\n            var formData = this.modal.getRoot().find('form').serialize();\n\n            // Now we can continue...\n            Ajax.call([{\n                methodname: 'local_modreportproblem_create',\n                args: {contextid: this.contextid, jsonformdata: JSON.stringify(formData)},\n                done: this.handleFormSubmissionResponse.bind(this),\n                fail: this.handleFormSubmissionFailure.bind(this)\n            }]);\n        };\n\n        CreateProblem.prototype.submitForm = function(e) {\n            e.preventDefault();\n\n            this.modal.getRoot().find('form').submit();\n        };\n\n        return {\n            init: function(selector, contextid, courseid, cmid, module) {\n                return new CreateProblem(selector, contextid, courseid, cmid, module);\n            }\n        };\n    }\n);\n"],"names":["define","$","Config","Str","ModalFactory","ModalEvents","Fragment","Ajax","Swal","Y","CreateProblem","selector","contextid","courseid","cmid","module","init","prototype","modal","triggers","get_string","then","title","create","type","types","SAVE_CANCEL","body","this","getBody","bind","getRoot","on","hidden","setBody","shown","append","save","submitForm","submitFormAjax","formdata","params","jsonformdata","JSON","stringify","loadFragment","handleFormSubmissionResponse","data","hide","use","M","core_formchangechecker","reset_form_dirty_state","mixin","toast","position","showConfirmButton","timer","timerProgressBar","onOpen","addEventListener","stopTimer","resumeTimer","fire","icon","status","handleFormSubmissionFailure","find","serializeArray","parse","e","preventDefault","changeEvent","document","createEvent","initEvent","each","index","element","dispatchEvent","invalid","merge","length","first","focus","formData","serialize","call","methodname","args","done","fail","submit"],"mappings":"AAOAA,+CAAO,CACC,SACA,cACA,WACA,qBACA,oBACA,gBACA,YACA,oCACA,aACJ,SAASC,EAAGC,OAAQC,IAAKC,aAAcC,YAAaC,SAAUC,KAAMC,KAAMC,OAElEC,cAAgB,SAASC,SAAUC,UAAWC,SAAUC,KAAMC,aACzDH,UAAYA,eAEZC,SAAWA,cAEXC,KAAOA,UAEPC,OAASA,YAETC,KAAKL,kBAGdD,cAAcO,UAAUC,MAAQ,KAEhCR,cAAcO,UAAUL,WAAa,EAErCF,cAAcO,UAAUJ,UAAY,EAEpCH,cAAcO,UAAUH,MAAQ,EAEhCJ,cAAcO,UAAUF,OAAS,GAEjCL,cAAcO,UAAUD,KAAO,SAASL,cAChCQ,SAAWlB,EAAEU,iBAEVR,IAAIiB,WAAW,yBAA0B,0BAA0BC,KAAK,SAASC,cAE7ElB,aAAamB,OAAO,CACvBC,KAAMpB,aAAaqB,MAAMC,YACzBJ,MAAOA,MACPK,KAAMC,KAAKC,QAAQ,CAAChB,SAAUe,KAAKf,SAAUC,KAAMc,KAAKd,KAAMC,OAAQa,KAAKb,UAC5EI,WACLW,KAAKF,OAAOP,KAAK,SAASH,mBAEnBA,MAAQA,WAGRA,MAAMa,UAAUC,GAAG3B,YAAY4B,OAAQ,gBACnCf,MAAMgB,QAAQN,KAAKC,QAAQ,CAAChB,SAAUe,KAAKf,SAAUC,KAAMc,KAAKd,KAAMC,OAAQa,KAAKb,WAC1Fe,KAAKF,YAGFV,MAAMa,UAAUC,GAAG3B,YAAY8B,MAAO,gBAClCjB,MAAMa,UAAUK,OAAO,0EAC9BN,KAAKF,YAIFV,MAAMa,UAAUC,GAAG3B,YAAYgC,KAAMT,KAAKU,WAAWR,KAAKF,YAE1DV,MAAMa,UAAUC,GAAG,SAAU,OAAQJ,KAAKW,eAAeT,KAAKF,OAE5DA,KAAKV,OACdY,KAAKF,QAGXlB,cAAcO,UAAUY,QAAU,SAASW,eACf,IAAbA,WACPA,SAAW,QAIXC,OAAS,CAACC,aAAcC,KAAKC,UAAUJ,kBAEpClC,SAASuC,aAAa,yBAA0B,cAAejB,KAAKhB,UAAW6B,SAG1F/B,cAAcO,UAAU6B,6BAA+B,SAASC,WACvD7B,MAAM8B,OAEXvC,EAAEwC,IAAI,iCAAiC,WACnCC,EAAEC,uBAAuBC,4BAGjB5C,KAAK6C,MAAM,CACnBC,OAAO,EACPC,SAAU,UACVC,mBAAmB,EACnBC,MAAO,IACPC,kBAAkB,EAClBC,OAASL,QACLA,MAAMM,iBAAiB,aAAcpD,KAAKqD,WAC1CP,MAAMM,iBAAiB,aAAcpD,KAAKsD,gBAI5CC,KAAK,CACPC,KAAM,UACN1C,MAAOyB,KAAKkB,UAIpBvD,cAAcO,UAAUiD,4BAA8B,eAC9CnB,KAAOnB,KAAKV,MAAMa,UAAUoC,KAAK,QAAQC,sBAIxClD,MAAMgB,QAAQN,KAAKC,QAAQc,KAAK0B,MAAMtB,SAG/CrC,cAAcO,UAAUsB,eAAiB,SAAS+B,GAE9CA,EAAEC,qBAEEC,YAAcC,SAASC,YAAY,cACvCF,YAAYG,UAAU,UAAU,GAAM,QAMjCzD,MAAMa,UAAUoC,KAAK,UAAUS,MAAK,SAASC,MAAOC,SACrDA,QAAQC,cAAcP,oBAItBQ,QAAU/E,EAAEgF,MACZrD,KAAKV,MAAMa,UAAUoC,KAAK,yBAC1BvC,KAAKV,MAAMa,UAAUoC,KAAK,cAI1Ba,QAAQE,OACRF,QAAQG,QAAQC,iBAKhBC,SAAWzD,KAAKV,MAAMa,UAAUoC,KAAK,QAAQmB,YAGjD/E,KAAKgF,KAAK,CAAC,CACPC,WAAY,gCACZC,KAAM,CAAC7E,UAAWgB,KAAKhB,UAAW8B,aAAcC,KAAKC,UAAUyC,WAC/DK,KAAM9D,KAAKkB,6BAA6BhB,KAAKF,MAC7C+D,KAAM/D,KAAKsC,4BAA4BpC,KAAKF,WAIpDlB,cAAcO,UAAUqB,WAAa,SAASgC,GAC1CA,EAAEC,sBAEGrD,MAAMa,UAAUoC,KAAK,QAAQyB,UAG/B,CACH5E,KAAM,SAASL,SAAUC,UAAWC,SAAUC,KAAMC,eACzC,IAAIL,cAAcC,SAAUC,UAAWC,SAAUC,KAAMC"}