{"version":3,"file":"answer.min.js","sources":["../../src/problem/answer.js"],"sourcesContent":["/**\n * Report problem js logic.\n *\n * @copyright   2022 Willian Mano {@link https://conecti.me}\n * @author      Willian Mano <willianmanoaraujo@gmail.com>\n */\n/* eslint-disable */\ndefine([\n        'jquery',\n        'core/config',\n        'core/str',\n        'core/modal_factory',\n        'core/modal_events',\n        'core/fragment',\n        'core/ajax',\n        'local_modreportproblem/sweetalert',\n        'core/yui'],\n    function($, Config, Str, ModalFactory, ModalEvents, Fragment, Ajax, Swal, Y) {\n\n        var Answer = function(selector, contextid, id) {\n            this.contextid = contextid;\n\n            this.id = id;\n\n            this.init(selector);\n        };\n\n        Answer.prototype.modal = null;\n\n        Answer.prototype.contextid = -1;\n\n        Answer.prototype.id = -1;\n\n        Answer.prototype.init = function(selector) {\n            var triggers = $(selector);\n\n            return Str.get_string('reporttechnicalproblem', 'local_modreportproblem').then(function(title) {\n                // Create the modal.\n                return ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: title,\n                    body: this.getBody({id: this.id})\n                }, triggers);\n            }.bind(this)).then(function(modal) {\n                // Keep a reference to the modal.\n                this.modal = modal;\n\n                // We want to reset the form every time it is opened.\n                this.modal.getRoot().on(ModalEvents.hidden, function() {\n                    this.modal.setBody(this.getBody({id: this.id}));\n                }.bind(this));\n\n                // We want to hide the submit buttons every time it is opened.\n                this.modal.getRoot().on(ModalEvents.shown, function() {\n                    this.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                }.bind(this));\n\n                // We catch the modal save event, and use it to submit the form inside the modal.\n                // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                this.modal.getRoot().on(ModalEvents.save, this.submitForm.bind(this));\n                // We also catch the form submit event and use it to submit the form with ajax.\n                this.modal.getRoot().on('submit', 'form', this.submitFormAjax.bind(this));\n\n                return this.modal;\n            }.bind(this));\n        };\n\n        Answer.prototype.getBody = function(formdata) {\n            if (typeof formdata === \"undefined\") {\n                formdata = {};\n            }\n\n            // Get the content of the modal.\n            var params = {jsonformdata: JSON.stringify(formdata)};\n\n            return Fragment.loadFragment('local_modreportproblem', 'answer_form', this.contextid, params);\n        };\n\n        Answer.prototype.handleFormSubmissionResponse = function(data) {\n            // We could trigger an event instead.\n            Y.use('moodle-core-formchangechecker', function() {\n                M.core_formchangechecker.reset_form_dirty_state();\n            });\n\n\n            $('#answer-textarea').val(this.modal.getRoot().find('#id_answer').val());\n\n            $('#answer-area').removeClass('d-none');\n\n            $('#btn-answer').remove();\n\n            var Toast = Swal.mixin({\n                toast: true,\n                position: 'top-end',\n                showConfirmButton: false,\n                timer: 8000,\n                timerProgressBar: true,\n                onOpen: (toast) => {\n                    toast.addEventListener('mouseenter', Swal.stopTimer);\n                    toast.addEventListener('mouseleave', Swal.resumeTimer);\n                }\n            });\n\n            Toast.fire({\n                icon: 'success',\n                title: data.status\n            });\n\n            this.modal.hide();\n        };\n\n        Answer.prototype.handleFormSubmissionFailure = function() {\n            var data = this.modal.getRoot().find('form').serializeArray();\n\n            // Oh noes! Epic fail :(\n            // Ah wait - this is normal. We need to re-display the form with errors!\n            this.modal.setBody(this.getBody(JSON.parse(data)));\n        };\n\n        Answer.prototype.submitFormAjax = function(e) {\n            // We don't want to do a real form submission.\n            e.preventDefault();\n\n            var changeEvent = document.createEvent('HTMLEvents');\n            changeEvent.initEvent('change', true, true);\n\n            // Prompt all inputs to run their validation functions.\n            // Normally this would happen when the form is submitted, but\n            // since we aren't submitting the form normally we need to run client side\n            // validation.\n            this.modal.getRoot().find(':input').each(function(index, element) {\n                element.dispatchEvent(changeEvent);\n            });\n\n            // Now the change events have run, see if there are any \"invalid\" form fields.\n            var invalid = $.merge(\n                this.modal.getRoot().find('[aria-invalid=\"true\"]'),\n                this.modal.getRoot().find('.error')\n            );\n\n            // If we found invalid fields, focus on the first one and do not submit via ajax.\n            if (invalid.length) {\n                invalid.first().focus();\n                return;\n            }\n\n            // Convert all the form elements values to a serialised string.\n            var formData = this.modal.getRoot().find('form').serialize();\n\n            // Now we can continue...\n            Ajax.call([{\n                methodname: 'local_modreportproblem_answer',\n                args: {contextid: this.contextid, jsonformdata: JSON.stringify(formData)},\n                done: this.handleFormSubmissionResponse.bind(this),\n                fail: this.handleFormSubmissionFailure.bind(this)\n            }]);\n        };\n\n        Answer.prototype.submitForm = function(e) {\n            e.preventDefault();\n\n            this.modal.getRoot().find('form').submit();\n        };\n\n        return {\n            init: function(selector, contextid, id) {\n                return new Answer(selector, contextid, id);\n            }\n        };\n    }\n);\n"],"names":["define","$","Config","Str","ModalFactory","ModalEvents","Fragment","Ajax","Swal","Y","Answer","selector","contextid","id","init","prototype","modal","triggers","get_string","then","title","create","type","types","SAVE_CANCEL","body","this","getBody","bind","getRoot","on","hidden","setBody","shown","append","save","submitForm","submitFormAjax","formdata","params","jsonformdata","JSON","stringify","loadFragment","handleFormSubmissionResponse","data","use","M","core_formchangechecker","reset_form_dirty_state","val","find","removeClass","remove","mixin","toast","position","showConfirmButton","timer","timerProgressBar","onOpen","addEventListener","stopTimer","resumeTimer","fire","icon","status","hide","handleFormSubmissionFailure","serializeArray","parse","e","preventDefault","changeEvent","document","createEvent","initEvent","each","index","element","dispatchEvent","invalid","merge","length","first","focus","formData","serialize","call","methodname","args","done","fail","submit"],"mappings":"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"}